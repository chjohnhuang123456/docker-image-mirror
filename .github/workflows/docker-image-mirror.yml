name: docker image mirror

on:
  issues:
    types: [opened]
  label:
    types: [created]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      DOCKER_IMAGE: ${{ steps.pullIssuesPorter.outputs.DOCKER_IMAGE }}
      SUCCESS: ${{ steps.successCheck.outputs.SUCCESS }}

    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Get porter issues
      id: pullIssuesPorter
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          console.log(context)
          let title = context?.payload?.issue?.title;
          let start = 0;

          if (title.includes("[PORTER]")){
              start = 8;
          }

          let docker_image = title.substring(start).trim();
          let issues_author = context?.payload?.issue?.user?.login;

          let issues_body = '';
          let is_error = false;

          if( docker_image.includes("@")){
            is_error = true;
            issues_body = '@' + issues_author +' 拉取镜像不支持带摘要信息，请去除 @部分'
          }else{
            issues_body = `构建进展，详见 [构建任务](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{github.run_id}})`
          }

          const issuesComment = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: issues_body
          });
          console.log("create issues comment resp:", issuesComment["status"]);

          if(is_error){
            core.setFailed("Error");
          }else if (!docker_image){
            core.setFailed("No Images");
          }
          core.setOutput('DOCKER_IMAGE', docker_image);

    - name: Retrieve transfer image name
      run: |
        DOCKER_IMAGE="${{ steps.pullIssuesPorter.outputs.DOCKER_IMAGE }}"
        echo "::set-output name=MY_DOCKER_IMAGE_NAME::${{ secrets.DOCKER_USERNAME }}/$(echo ${DOCKER_IMAGE#*/} | sed "s@/@.@g;s@ @\n@g;")"
      id: transferImage

    - name: Pull image and push to docker hub
      shell: bash
      run: |
        docker pull ${{ steps.pullIssuesPorter.outputs.DOCKER_IMAGE }}
        echo ${{ steps.transferImage.outputs.MY_DOCKER_IMAGE_NAME }}
        docker images
        docker tag ${{ steps.pullIssuesPorter.outputs.DOCKER_IMAGE }} ${{ steps.transferImage.outputs.MY_DOCKER_IMAGE_NAME }}
        docker push ${{ steps.transferImage.outputs.MY_DOCKER_IMAGE_NAME }}

    - name: Success check
      id: successCheck
      uses: actions/github-script@v6
      if: ${{ success() }}
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          core.setOutput('SUCCESS', true)

    - name: Close Porter Issues
      id: closePorterIssues
      uses: actions/github-script@v6
      if: ${{ always() }}
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const issuesResponse =  await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            state: 'closed'
          });
          console.log("update issues resp:", issuesResponse["status"] == 200 ? "success" : "failed" );

          let body = `转换失败，详见 [构建任务](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{github.run_id}})`;
          let success = String(${{ steps.successCheck.outputs.SUCCESS }}).toLowerCase() == "true";
          console.log("is success?", success);

          let labels = [];
          if(success){
            body = "转换完成 <br/>\n```bash \n#原镜像\n${{ steps.pullIssuesPorter.outputs.DOCKER_IMAGE }}\n\n\n#转换后镜像\n${{ steps.transferImage.outputs.MY_DOCKER_IMAGE_NAME }}\n\n\n```"
            labels=['success']
          }else{
            const jobsResponse = await github.request(`GET /repos/${context.repo.owner}/${context.repo.repo}/actions/runs/${{github.run_id}}/jobs`, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.run_id }}
            });
            console.log("jobs",jobsResponse['data']);
            body += "\n\n 日志:\n\n";
            for(let job of jobsResponse['data']['jobs']){
                body += "- [" + job.name + "](" + job.html_url +")";
            }
            labels = ['failure'];
          }

          // 创建 issues comment
          const issuesComment = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
          });
          console.log("create issues comment resp:", issuesComment["status"] == 201 ? "success" : "failed" );

          // 更新 issues label
          if(labels){
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }
